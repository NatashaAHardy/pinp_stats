panel.abline(h=0)
})
#Anova
#Highly significant, not sure if working for our data
bird_detect_anova <- aov(detection ~ metric, data = bird_med)
anova(bird_detect_anova, test = "Chisq")
fig5.pal
#Colour palette
figS2.pal <- pnw_palette(4, name = "Sunset", type = "continuous")
figS2_otu_RRA = otu_rra %>%
ggplot() +
geom_bar(aes(x=time_id:sample, y=prop_abun, fill=OTU), stat="identity")+
coord_flip()+
theme_classic() +
theme(panel.grid.major = element_blank(),
axis.ticks.y = element_blank(),
plot.title=element_text(face="bold", size=18),
axis.title=element_text(size=18),
axis.text=element_text(size=18),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
legend.position="top"
) +
scale_fill_manual(values=figS2.pal, name="Taxa:")+
labs(x="Sample date: sample number", y="Relative DNA abundance (%)") + # Axis labels
facet_grid(location~., scales="free", space='free') +
theme(strip.text = element_text(size=rel(1.5)), #face="bold",
strip.background = element_rect(fill="lightgrey", colour="black",
size=1))
figS2_otu_RRA
figS2_otu_RRA = otu_rra %>%
ggplot() +
geom_bar(aes(x=time_id:sample, y=prop_abun, fill=OTU), stat="identity")+
coord_flip()+
theme_classic() +
theme(panel.grid.major = element_blank(),
axis.ticks.y = element_blank(),
plot.title=element_text(face="bold", size=18),
axis.title=element_text(size=18),
axis.text=element_text(size=18),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
legend.position="top"
) +
scale_fill_manual(values=fig4b.pal, name="Taxa:")+
labs(x="Sample date: sample number", y="Relative DNA abundance (%)") + # Axis labels
facet_grid(location~., scales="free", space='free') +
theme(strip.text = element_text(size=rel(1.5)), #face="bold",
strip.background = element_rect(fill="lightgrey", colour="black",
size=1))
figS2_otu_RRA
View(hp_taxa_export)
getwd()
getwd()
#Check working directory - the same as the doc directory.
#getwd()
#Install Packages as needed
#install.packages("rcompanion")
#Load
library(tidyverse)
library(tidyr)
library(tidytext)
#library(reshape)
library(plyr)
library(dplyr)
library(PNWColors)
library(lattice)
library(reshape2)
library(lme4)
library(ggplot2)
library(rcompanion)
library(gg.gap)
library(forcats)
library(devtools)
library(cowplot)
library(grid)
library(gridExtra)
library(scales)
library(ggpubr)
library(here)
"%notin%" = Negate('%in%')
here::here()
#Note that loading all these packages is hell because of overlap in functions, some packages being superceded but still requiring each other or requiring functions from one package to another. You'll notice I had to force a lot of functions by calling the package as follows
#data %>% package::function(etc). I'm sure there are more talented and savvy coders than me who can figure this out more elegantly.
bird_master_test = bird_master %>%
select(location, time_id, group_id, metric, method, detection) %>%
dplyr::filter(metric == c('hp', 'dna'), location != "Deen Maar", method != "DNA stringent QC")
#Check working directory - the same as the doc directory.
#getwd()
#Install Packages as needed
#install.packages("rcompanion")
#Load
library(tidyverse)
library(tidyr)
library(tidytext)
#library(reshape)
library(plyr)
library(dplyr)
library(PNWColors)
library(lattice)
library(reshape2)
library(lme4)
library(ggplot2)
library(rcompanion)
library(gg.gap)
library(forcats)
library(devtools)
library(cowplot)
library(grid)
library(gridExtra)
library(scales)
library(ggpubr)
library(here)
"%notin%" = Negate('%in%')
here::here()
#Note that loading all these packages is hell because of overlap in functions, some packages being superceded but still requiring each other or requiring functions from one package to another. You'll notice I had to force a lot of functions by calling the package as follows
#data %>% package::function(etc). I'm sure there are more talented and savvy coders than me who can figure this out more elegantly.
#0 = "hp_taxa" tab
hp_taxa_export <- read.csv(here("data/input_data/hp_taxa.csv"), header=TRUE)
#1 = "bird_detect_med" tab
bird_wide_med <- read.csv(here("data/input_data/bird_detect_med.csv"), header=TRUE)
#2 = "bird_detect_high" tab
bird_wide_high <- read.csv(here("data/input_data/bird_detect_high.csv"), header=TRUE)
#3 = "penguin_detect_med" tab
penguin_wide_med <- read.csv(here("data/input_data/penguin_detect_med.csv"), header=TRUE)
#4 = "penguin_detect_high" tab
penguin_wide_high <- read.csv(here("data/input_data/penguin_detect_high.csv"), header=TRUE)
#5 = "otu_med" tab
otu_med_export <- read.csv(here("data/input_data/otu_med.csv"), header=TRUE)
#6 = "otu_high" tab
otu_high_export <- read.csv(here("data/input_data/otu_high.csv"), header=TRUE)
#7 penguin haplotypes
penguin_haplos_export <- read.csv(here("data/input_data/penguin_haplos.csv"), header=TRUE)
hp_taxa = hp_taxa_export %>%
dplyr::rename(`E. minor` = `SUM.of.penguin_hp`,
Procellarid = `SUM.of.procellarid_hp`,
`M. serrator` = `SUM.of.gannet_hp`,
`Seabird unknown` = `SUM.of.unknown_hp`) %>%
#Renamed columns
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "Taxa", value.name = "detect") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
#Added the character vector/factor for merging with the high stringency data
mutate(method = "hard-parts")
#Rename factor levels
hp_taxa$location <- factor(hp_taxa$location,
levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"),
labels = c("Cape Bridgewater", "Gabo Island", "Deen Maar", "Barunguba"))
hp_taxa$time_id <- factor(hp_taxa$time_id,
levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"),
labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
bird_med = bird_wide_med %>%
dplyr::rename(hp = `SUM.of.allbirds_hp`, dna = `SUM.of.allbirds_dna_cons`,
dna_or_hp = `SUM.of.allbirds_cons_dna_or_hp`,
both_methods = `SUM.of.allbirds_cons_both`,
same_taxon = `SUM.of.allbirds_cons_sametaxa`) %>%
#Renamed columns
dplyr::select(., -both_methods) %>%
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "metric", value.name = "detection") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
#Added the character vector/factor for merging with the high stringency data
mutate(method = if_else(metric == "hp", "hard part", "DNA standard QC"))
#Rename factor levels
bird_med$location <- factor(bird_med$location,
levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"),
labels = c("Cape Bridgewater", "Gabo Island", "Deen Maar", "Barunguba"))
bird_med$time_id <- factor(bird_med$time_id,
levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"),
labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
bird_high = bird_wide_high %>%
dplyr::rename(hp = `SUM.of.allbirds_hp`, dna = `SUM.of.allbirds_dna_high`,
dna_or_hp = `SUM.of.allbirds_high_dna_or_hp`,
both_methods = `SUM.of.allbirds_high_both`,
same_taxon = `SUM.of.allbirds_high_same`) %>%
#Renamed columns
dplyr::select(., -both_methods) %>%
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "metric", value.name = "detection") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
filter(metric != "hp") %>% #here I'm removing the repeated subset of data on hard-part analysis for graphing
mutate(method = "DNA stringent QC")
#Rename factor levels
bird_high$location <- factor(bird_high$location,
levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"),
labels = c("Cape Bridgewater", "Gabo Island", "Deen Maar", "Barunguba"))
bird_high$time_id <- factor(bird_high$time_id,
levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"),
labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
penguin_med = penguin_wide_med %>%
dplyr::rename(hp = `SUM.of.penguin_hp`, dna = `SUM.of.penguin_dna_cons`,
dna_or_hp = `SUM.of.penguin_cons_dna_or_hp`,
same_taxon = `SUM.of.penguin_cons_both`) %>%
#Renamed columns
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "metric", value.name = "detection") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
mutate(method = if_else(metric == "hp", "hard part", "DNA standard QC"))
#Rename factor levels
penguin_med$location <- factor(penguin_med$location,
levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"),
labels = c("Cape Bridgewater", "Gabo Island", "Deen Maar", "Barunguba"))
penguin_med$time_id <- factor(penguin_med$time_id,
levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"),
labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
penguin_high = penguin_wide_high %>%
dplyr::rename(hp = `SUM.of.penguin_hp`, dna = `SUM.of.penguin_dna_high`,
dna_or_hp = `SUM.of.penguin_high_dna_or_hp`,
same_taxon = `SUM.of.penguin_high_both`) %>%
#Renamed columns
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "metric", value.name = "detection") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
#Added the character vector/factor for merging with the high stringency data
filter(metric != "hp") %>% #here I'm removing the repeated subset of data on hard-part analysis for graphing
mutate(method = "DNA stringent QC")
#Rename factor levels
penguin_high$location <- factor(penguin_high$location,
levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"),
labels = c("Cape Bridgewater", "Gabo Island", "Deen Maar", "Barunguba"))
penguin_high$time_id <- factor(penguin_high$time_id,
levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"),
labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
#OTU_med cleaning
otu_med = otu_med_export %>%
dplyr::rename(OTU1_E_minor = `SUM.of.cons_OTU_1..Eudyptula.minor.`,
OTU2_Procellarid1 = `SUM.of.cons_OTU_2..Procellariidae.sp.1.`,
OTU3_Procellarid2 = `SUM.of.cons_OTU_3..Procellariidae.sp.2.`,
OTU4_T_melanophris = `SUM.of.cons_OTU_4..Thalassarche.melanophris.`,
OTU5_S_bergii = `SUM.of.cons_OTU_5..Sterna.bergii.`) %>%
#Renamed columns
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "OTU", value.name = "seq_abun") %>%
#Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"
#Added the character vector/factor for merging with the high stringency data
mutate(method = "DNA standard QC")
#Relative read abundances by taxon / OTU
#Truncating datasets to calculate additional sequence metrics.
mdata1 = otu_med %>%
filter(OTU == "OTU1_E_minor") %>%
mutate(seq_prop = seq_abun/sum(seq_abun)*100)
mdata2 = otu_med %>%
filter(OTU == "OTU2_Procellarid1") %>%
mutate(seq_prop = seq_abun/sum(seq_abun)*100)
mdata3 = otu_med %>%
filter(OTU == "OTU3_Procellarid2") %>%
mutate(seq_prop = seq_abun/sum(seq_abun)*100)
mdata4 = otu_med %>%
filter(OTU == "OTU4_T_melanophris") %>%
mutate(seq_prop = seq_abun/sum(seq_abun)*100)
mdata5 = otu_med %>%
filter(OTU == "OTU5_S_bergii") %>%
mutate(seq_prop = seq_abun/sum(seq_abun)*100)
#Join these subsetted and manipulated datasets
otu_med_data = rbind(mdata1, mdata2, mdata3, mdata4, mdata5)
#These two are split due to problems knitting the doc
otu_med_data = otu_med_data %>%
mutate(trace_high = if_else(otu_med_data$seq_abun >= 10, "high", "trace"),
total_prop = seq_abun/sum(seq_abun)*100) #Add trace vs. high DNA abundance, and proportion of total seq abundance variable #Relative read abundance / total DNA abundance
#Change labels for location
otu_med_data$location <- factor(otu_med_data$location, levels = c("Cape Bridgewater", "Gabo Island", "Lady Julia Percy", "Montague Island"), labels = c("Cape Bridgewater", "GI", "DM", "Barunguba"))
#Change labels for time
otu_med_data$time_id <- factor(otu_med_data$time_id, levels = c("Sep_15", "Jan_16", "Sep_16", "Jan_17", "Mar_17"), labels = c("Sep'15", "Jan'16", "Sep'16", "Jan'17", "Mar'17"))
#Change labels for OTUs
#levels(otu_med_abundant$OTU)
otu_med_data$OTU <- factor(otu_med_data$OTU, levels = c("OTU1_E_minor", "OTU2_Procellarid1", "OTU3_Procellarid2", "OTU4_T_melanophris", "OTU5_S_bergii"), labels = c("E. minor", "Procellarid sp1", "Procellarid sp2", "T. melanophris", "S. bergii"))
otu_med_data$trace_high <- as.factor(otu_med_data$trace_high)
#output = otu_med_data
# Created a separate summary df
otu_med_sum <- ddply(otu_med_data, c("location", "time_id", "group_id", "sample_id"), summarise,
sample_abun = sum(seq_abun))
# Joined back by sample_id (shared variable)
otu_sampleabun <- merge(x = otu_med_data, y = otu_med_sum, by = c("location", "time_id", "group_id", "sample_id"))
otu_metrics = otu_sampleabun %>%
select(location:OTU, method, trace_high, seq_abun, sample_abun, seq_prop, total_prop) %>%
#dplyr::rename(location = `location.x`, time_id = `time_id.x`, group_id = `group_id.x`) %>%
mutate(prop_abun = if_else(sample_abun >= 1, seq_abun/sample_abun*100, 0))
#output = otu_metrics and supercedes otu_med_data
penguin_haplos = penguin_haplos_export %>%
dplyr::select(-time) %>%
dplyr::rename(haplo_1 = `SUM.of.haplo_1`,
haplo_2 = `SUM.of.haplo_2`,
haplo_3 = `SUM.of.haplo_3`,
haplo_4 = `SUM.of.haplo_4`,
haplo_5 = `SUM.of.haplo_5`,
haplo_6 = `SUM.of.haplo_6`,
haplo_7 = `SUM.of.haplo_7`) %>%
#Renamed columns
reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "haplotype", value.name = "seq_abun") %>%
mutate(seq_presence = if_else(seq_abun > 0, "1", "0")) %>%
filter(seq_abun > 1)
penguin_haplos_sample = penguin_haplos %>%
separate(sample_id, c("loc", "month", "year", "sample"))
penguin_haplos_sample$sample <- as.factor(penguin_haplos_sample$sample)
#output = penguin_haplos_sample
#Need to join the bird_med and bird_high datasets for graphing
bird_master <- rbind(bird_med, bird_high)
#Need to join the penguin_med and penguin_high datasets for graphing
penguin_master <- rbind(penguin_med, penguin_high)
#Overall bird detection by method: need to summarise of all samples containing bird by method of detection
#Need to scale to 100%
# Bird master
bird_sum_master <- ddply(bird_master, c("method", "metric"), summarise,
`Detected` = sum(detection, na.rm=TRUE)*100/99)
# Penguin master
penguin_sum_master <- ddply(penguin_master, c("method", "metric"), summarise,
`Detected` = sum(detection, na.rm=TRUE)*100/99)
#Can double check this with table()
#i.e., table(bird_long$metric, bird_long$value)
#Overall detection by location and sampling time
#Here we want to select just the metrics that we want to display and need to scale to 100%
as.factor(bird_master$method)
levels(bird_master$method)
#0 sampling effort by time / location for Bec:
observations = bird_med %>%
group_by(location, time_id, group_id, metric) %>%
dplyr::summarize(obs = n()) %>%
filter(metric == c('hp')) %>%
select(location, time_id, group_id, obs)
#write.csv(observations, here("data/output_data/sampling_effort.csv"))
#1 Bird detections by location/time
#Summarise
#PROBLEM = how to turn this into a percentage of samples within each location/time?
bird_sum_group = bird_med %>%
group_by(location, time_id, group_id, metric) %>%
dplyr::summarize(obs = n(), detected = sum(detection), percentage_detected = (detected/obs*100))
#Take subset for figure
bird_master_group = bird_sum_group %>%
select(location, time_id, group_id, metric, obs, detected, percentage_detected) %>%
filter(metric == c('hp', 'dna'))
#2 Penguin detections by location/time
#Summarise
penguin_sum_group = penguin_med %>%
group_by(location, time_id, group_id, metric) %>%
dplyr::summarize(obs = n(), detected = sum(detection), percentage_detected = (detected/obs*100))
#Take subset for figure
penguin_master_group = penguin_sum_group %>%
select(location, time_id, group_id, metric, obs, detected, percentage_detected) %>%
filter(metric == c('hp', 'dna'))
#Need to join the penguin_med and penguin_high datasets for graphing
otu_hp_master = otu_metrics %>%
dplyr::rename(`Taxa` = `OTU`) %>%
mutate(detect = if_else(seq_abun > 0, 1, 0)) %>%
full_join(hp_taxa, by= c("sample_id", "location_id", "location", "time_id", "group_id", "method", "Taxa", "detect")) %>%
separate(sample_id, c("loc", "month", "year", "sample")) %>%
select(sample, location_id, location, time_id, group_id, Taxa, method, trace_high, seq_abun, sample_abun, seq_prop, total_prop, prop_abun, detect)
#Change order of levels for Taxa
otu_hp_master$Taxa <- factor(otu_hp_master$Taxa, levels = c("E. minor", "Procellarid sp1", "Procellarid sp2", "Procellarid", "T. melanophris", "S. bergii", "M. serrator", "Seabird unknown"))
otu_hp_master$method <- as.factor(otu_hp_master$method)
otu_hp_master$sample <- as.factor(otu_hp_master$sample)
otu_hp_master$detect <- as.integer(otu_hp_master$detect)
#Figure 3a
#Figure 3 colour palette
fig3.pal <- pnw_palette(5, name = "Bay", type = "continuous")
#Relevel the method so that hard-part method comes first in the graph AND relabel
#levels(bird_sum_master$method) #check levels
bird_sum_master$method <- factor(bird_sum_master$method, levels = c("hard part", "DNA standard QC", "DNA stringent QC"), label = c("hard parts", "DNA (all)", "DNA (abundant)"))
#Relabel to clarify calculations
#levels(bird_sum_master$metric) # check levels
bird_sum_master$metric <- factor(bird_sum_master$metric, levels = c("hp", "dna", "dna_or_hp", "same_taxon"), label = c("hp", "dna", "dna or hp", "same taxon"))
#Figure 3a
fig3a_bird <- ggplot(bird_sum_master, aes(x=metric, y=Detected, fill=metric)) +
geom_bar(stat="identity", position="dodge", width=1)+
ggtitle("a) Seabird detections by metric")+
theme_bw() +
theme(panel.grid.major = element_blank(),
plot.title=element_text(size=18), #face="bold",
axis.title=element_blank(), #element_text(size=18)
axis.text=element_text(size=18),
axis.text.x=element_blank(),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
legend.position="bottom"
) +
ylim(0,50)+
#theme(legend.position=c(0.60,0.80), legend.justification=c(0.4,0.5))+
scale_fill_manual(values=fig3.pal)+
guides(fill=FALSE) +
#guides(fill=guide_legend(title="Containing:"))+
#labs(x=NULL, y="Percentage of samples (%)") + #x="Metric",
facet_grid(.~method, scales="free",space='free') +
theme(strip.text = element_text(size=rel(1.25)), #face="bold",
strip.background = element_rect(fill="lightgrey", colour="black",
size=1))
fig3a_bird
#ggsave(here('figures/Final versions/fig3a_bird.jpeg'), plot = fig3a_bird, width = 9, height = 5, dpi = 300)
#Figure 3b
#Relevel the method so that hard-part method comes first in the graph
#levels(penguin_sum_master$method)
penguin_sum_master$method <- factor(penguin_sum_master$method, levels = c("hard part", "DNA standard QC", "DNA stringent QC"))
#Relabel to clarify
penguin_sum_master$method <- factor(penguin_sum_master$method, levels = c("hard part", "DNA standard QC", "DNA stringent QC"), label = c("hard parts", "DNA (all)", "DNA (abundant)"))
#levels(penguin_sum_master$metric)
penguin_sum_master$metric <- factor(penguin_sum_master$metric, levels = c("hp", "dna", "dna_or_hp", "same_taxon"), label = c("hp", "dna", "dna or hp", "same taxon"))
#Figure 3b
fig3b_penguin <- ggplot(penguin_sum_master, aes(x=metric, y=Detected, fill=metric)) +
geom_bar(stat="identity", position="dodge", width=1)+
ggtitle("b) Penguin detections by metric")+
theme_bw() +
theme(panel.grid.major = element_blank(),
plot.title=element_text(size=18), #face="bold",
axis.title=element_blank(), #element_text(size=18)
axis.text=element_text(size=18),
axis.text.x=element_blank(),
legend.text=element_text(size=16),
legend.title=element_text(size=16),
legend.position="bottom"
) +
#theme(legend.position=c(0.60,0.80), legend.justification=c(0.4,0.5))+
ylim(0,50)+
scale_fill_manual(values=fig3.pal)+
guides(fill=guide_legend(title="Containing:"))+
labs(x=NULL, y="Percentage of samples (%)") + #x="Metric",
facet_grid(.~method, scales="free",space='free') +
theme(strip.text = element_text(size=rel(1.25)), #face="bold",
strip.background = element_rect(fill="lightgrey", colour="black",
size=1))
fig3b_penguin
#ggsave(here('figures/Final versions/fig3b_penguin.jpeg'), plot = fig3b_penguin, width = 9, height = 5, dpi = 300)
#Merge the following plots into a single panel
#fig3a_bird & fig3b_penguin
#create common axis titles
y.grob <- textGrob("Percentage of samples (%)", gp=gpar(fontsize=18), rot=90) #fontface="bold", col="blue",
#x.grob <- textGrob("Percentage of samples containing remains (%)", gp=gpar(fontsize=18)) #fontface="bold", col="blue",
#combine using cowplot
fig3_panel = plot_grid(fig3a_bird, fig3b_penguin,
#align = "h",
nrow = 2
#labels = c("a) Seabirds", "b) Little penguins (Eudyptula minor)"),
#label_size = 18, ncol = 2,
#label_x = 0.20, label_y = 1, hjust = 0, vjust = 1.5,
#scale = 0.95,
#label_x = 0.10, vjust = 1, rel_widths = c(1, 1), align = "v",
#greedy = TRUE
) #hjust = -7.5, label_x = c(0.12, 0.12, 0.12, 0.12, 0.12, 0.12)
#fig3_panel # check this
#add to plot
fig3_panel_ms = grid.arrange(arrangeGrob(fig3_panel, left = y.grob, padding = unit(1, "line")))
#ggsave(here("figures/Final versions/fig3_panel_ms.jpeg"), plot = fig3_panel_ms, width = 10, height = 10, scale = 0.95, dpi = 300)
#ggsave(here("figures/Final versions/fig3_panel_ms.pdf"), plot = fig3_panel_ms, width = 10, height = 10, scale = 0.95, dpi = 300)
levels(bird_master$method)
as.factor(bird_master$method)
summary(penguin_model_1)
#Penguin binomial GLMs for detection of birds ~ metric * sample group
str(penguin_master_test)
penguin_model_1 <- glm(detection ~ metric*group_id, family = binomial, data = penguin_master_test)
anova(penguin_model_1, test = "Chisq")
penguin_model_2 <- glm(detection ~ metric + group_id, family = binomial, data = penguin_master_test)
anova(penguin_model_2, test = "Chisq")
#Bird binomial GLMs for detection of birds ~ metric * sample group
bird_model_1 <- glm(detection ~ metric*group_id, family = binomial, data = bird_master_test)
anova(bird_model_1, test = "Chisq")
#Relevel factors to double check significance terms
levels(bird_master_test$group_id)
bird_master_test$group_id <- factor(bird_master_test$group_id, levels = c("CB_Sep_15", "CB_Jan_16", "CB_Sep_16", "CB_Jan_17", "GI_Jan_17",  "LJP_Mar_17", "MI_Sep_16",  "MI_Jan_17"))
bird_model_2 <- glm(detection ~ metric+group_id, family = binomial, data = bird_master_test)
anova(bird_model_2, test = "Chisq")
summary(bird_model_2)
#Model 1b validation
plot(bird_model_2)
#Or:
E2 <- resid(bird_model_2, type = "pearson")
F2 <- fitted(bird_model_2)
plot(x = F2,
y = E2,
xlab = "Fitted values",
ylab = "Residuals")
#Influential observations
plot(bird_model_2, which = c(4))
par(mfrow=c(1,1))
plot(cooks.distance(M3),
type = "h",
ylim = c(0,1))
plot(cooks.distance(bird_model_2),
type = "h",
ylim = c(0,1))
abline(h=1)
plot(cooks.distance(bird_model_2),
type = "h",
ylim = c(0,1))
abline(h=1)
#Independence:
#For group id --> variance heterogeneous
plot(x = bird_master_test$group_id,
y = E2,
xlab = "Group ID",
ylab = "Residuals")
#For method --> there is homogeneity of variance
plot(x = bird_master_test$method,
y = E2,
xlab = "Group ID",
ylab = "Residuals")
#For method --> there is homogeneity of variance
plot(x = bird_master_test$method,
y = E2,
xlab = "Group ID",
ylab = "Residuals")
#Per period:
xyplot(E2 ~ method | factor(group_id),
data = bird_master_test,
panel = function(x,y){
panel.points(x,y, col = 1, pch = 16, cex = 0.7)
panel.loess(x,y, col = 1, lwd = 2)
panel.abline(h=0)
})
boxplot(E3 ~ Period, data = Fish3)
boxplot(E2 ~ Period, data = bird_master_test)
#For method --> there is homogeneity of variance
plot(x = bird_master_test$method,
y = E2,
xlab = "Group ID",
ylab = "Residuals")
#Independence:
#For group id --> variance heterogeneous
plot(x = bird_master_test$group_id,
y = E2,
xlab = "Group ID",
ylab = "Residuals")
