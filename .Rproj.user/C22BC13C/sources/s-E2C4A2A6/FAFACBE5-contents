---
title: "R_code_library"
author: "Natasha Hardy"
date: "April 23, 2020"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load workspace
```{r Load Workspace}
#Install
install.packages()
#Load
library()

```

## Data manipulation
```{r Data load and exploration}
#Load data
data <- read.table("data.txt", head=TRUE) #for csv
data <- read.csv("data.csv", head=TRUE) #for txt
#for xlsx...?

#Data Exploration
str(data) #structure of df
head(data) #displays top few rows of df
names(data) #displays column names

pairs() #produces a matrix of scatterplots
cor() #var, cov and cor comput the variance of x, the covariance or correlation of
      #x and y if these are vectors.

#Data manipulation

##Useful matrix algebra
nrow() #number of rows in a matrix
ncol() #number of columns in a matrix
dim() #dimensions of matrix
```

```{r Data manipulation}
#Clean and manipulate data
data = allspecies %>%
  select() %>% #select columns you want and you can re-order by writing them in the order desired
  dplyr::rename(new_name = old_name) %>% #renaming columns
  dplyr::filter(column_name == "value", #filter out everything but that value
                column_name != "value", #filters that value
                column_name >= OR <= "value" #,
                ) %>% #OR
  dplyr::filter(use %in% c("yes", "maybe")) %>% #c("no", "NA") %>%
  #More advanced filtering: https://blog.exploratory.io/filter-data-with-dplyr-76cf5f1a258e 
  drop_na(`column name`) %>% #Remove NA's can drop NA's from any column if don't specify column name; or drop specifically rows with NA's in a certain column
  reshape2::melt(id.vars=c("sample_id", "location_id", "location", "time_id", "group_id"), variable.name = "metric", value.name = "detection") #%>%
  #Transform wide to long data, using melt(), and added arguments for renaming the output variable and value to "metric" and "detection"

#Replace NA's
#https://tidyr.tidyverse.org/reference/replace_na.html 

```

```{r Contingency tables}

table() #uses the cross-classifying factors to build a contingency table of the counts at each combination of factor levels.

```


```{r Long <-> Wide}
#From: http://www.cookbook-r.com/Manipulating_data/Converting_data_between_wide_and_long_format/
library(tidyr)

#Wide to long 
# The arguments to gather():
# - data: Data object
# - key: Name of new key column (made from names of data columns)
# - value: Name of new value column
# - ...: Names of source columns that contain values
# - factor_key: Treat the new key column as a factor (instead of character vector)
data_long <- gather(olddata_wide, condition, measurement, control:cond2, factor_key=TRUE)
data_long

#long to wide
# The arguments to spread():
# - data: Data object
# - key: Name of column containing the new column names
# - value: Name of column containing values
data_wide <- spread(olddata_long, condition, measurement)
data_wide

```

```{r R Graphics}
#esquisse package that interfaces with ggplot2
#https://cran.r-project.org/web/packages/esquisse/readme/README.html

```

```{r Panel plot - combining axes}
#OR
#This example using ggarrange and common.legend =TRUE
#https://stackoverflow.com/questions/13649473/add-a-common-legend-for-combined-ggplots

#combine using cowplot
#fig4_panel = plot_grid(fig4a_hptaxa , fig4b_dna_detect, fig4c_otu_abun, ncol = 3)
#fig4_panel
#create common axis titles
#y4.grob <- textGrob("Individual sample & Sampling time", gp=gpar(fontsize=18), rot=90) #fontface="bold", col="blue", 
#x5.grob <- textGrob("Detection of seabirds in samples (n)", gp=gpar(fontsize=18)) #fontface="bold", col="blue", 
#add to plot
#fig4_panel = grid.arrange(arrangeGrob(fig5_panel, left = y4.grob, padding = unit(1, "line"))) #bottom = x5.grob, 

```


```{r Useful functions}

function(x) sd(x)/sqrt(length(x))

```


## MV stats

```{r nMDS + plots}

alb_adult_nMDS = metaMDS(alb_adult_prey, 
                         distance="bray", 
                         trymax = 100, #1000
                         k=3) #could increase to k = 4

```


## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
